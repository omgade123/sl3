# 5) Data Analytics II
# 1. Implement logistic regression using Python/R to perform classification on Social_Network_Ads.csv dataset.
# 2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall
# on the given dataset.

import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv("Social_Network_Ads.csv")
df
-----------
df.isnull().sum()
-----------
X=df
Y=df
X=X.drop(['Purchased'],axis=1)
X
-----------
Y=df['Purchased']
Y
-----------
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix, precision_score, recall_score, accuracy_score
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.25,random_state=42)
-----------
Lr=LogisticRegression()
Lr.fit(X_train,Y_train)
-----------
Y_pred=Lr.predict(X_test)
acc_score=accuracy_score(Y_test,Y_pred)
print("Accuracy=",acc_score)
-----------


print("\nX_train",X_train)
print("\nX_test",X_test)
print("\nY_test",Y_test)
print("\nY_train",Y_train)

-----------
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)
-----------
Lr=LogisticRegression()
Lr.fit(X_train,Y_train)
Y_pred=Lr.predict(X_test)

#Accuracy
acc_score=accuracy_score(Y_test,Y_pred)
print("Accuracy=",acc_score)

# Confusion Matrix
conf_matrix = confusion_matrix(Y_test, Y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Precision
precision = precision_score(Y_test, Y_pred)
print("Precision:",precision)

# Recall
recall = recall_score(Y_test, Y_pred)
print("Recall: ",recall)

# Error Rate
error_rate = 1 - accuracy_score(Y_test, Y_pred)
print("Error Rate: ",error_rate)
------------
Lr.coef_
------------
Lr.intercept_




























